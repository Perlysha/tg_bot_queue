import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import logging

with open("config.json", "r") as config_file:
    config = json.load(config_file)

API_TOKEN = config["API_TOKEN"]
administrators = config["ADMIN_IDS"]

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

queue = []
users_accounts = {}

def is_admin(user_id):
    return user_id in administrators

def get_user_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å", callback_data="add_to_queue"),
        InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data="remove_from_queue"),
        InlineKeyboardButton("üîç –£–∑–Ω–∞—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ", callback_data="position_in_queue"),
        InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="list_queue")
    )
    return keyboard

def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å", callback_data="add_to_queue"),
        InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data="remove_from_queue"),
        InlineKeyboardButton("üîç –£–∑–Ω–∞—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ", callback_data="position_in_queue"),
        InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="list_queue"),
        InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="clear_queue")
    )
    return keyboard

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    if user_id not in users_accounts:
        users_accounts[user_id] = {"username": username, "in_queue": False}

    if is_admin(user_id):
        await message.reply("–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—ã—à–∫–æ! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–æ—á–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.", reply_markup=get_admin_keyboard())
    else:
        await message.reply("–í–æ—Ç –≤–∞–º –±–æ—Ç—è—Ä–∞, —á—Ç–æ–±—ã –≤ —á–∞—Ç –Ω–µ —Å–ø–∞–º–∏–ª–∏!", reply_markup=get_user_keyboard())

@dp.callback_query_handler(lambda query: query.data == "add_to_queue")
async def add_to_queue(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or callback_query.from_user.first_name

    if user_id not in users_accounts:
        users_accounts[user_id] = {"username": username, "in_queue": False}

    if user_id in queue:
        await callback_query.answer("–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!")
    else:
        queue.append(user_id)
        users_accounts[user_id]["in_queue"] = True
        await callback_query.answer(f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –í–∞—à –Ω–æ–º–µ—Ä: {len(queue)}.")

@dp.callback_query_handler(lambda query: query.data == "remove_from_queue")
async def remove_from_queue(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in queue:
        queue.remove(user_id)
        users_accounts[user_id]["in_queue"] = False
        await callback_query.answer("–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
    else:
        await callback_query.answer("–í–∞—Å –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏.")

@dp.callback_query_handler(lambda query: query.data == "position_in_queue")
async def position_in_queue(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in queue:
        position = queue.index(user_id) + 1
        await callback_query.answer(f"–í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {position}.")
    else:
        await callback_query.answer("–í–∞—Å –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏.")

@dp.callback_query_handler(lambda query: query.data == "list_queue")
async def list_queue(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if queue:
        if is_admin(user_id):
            users_list = []
            for i, user_id_in_queue in enumerate(queue):
                if user_id_in_queue in users_accounts:
                    username = users_accounts[user_id_in_queue]["username"]
                    users_list.append(f"{i + 1}. {username} (ID: {user_id_in_queue})")
                else:
                    users_list.append(f"{i + 1}. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id_in_queue})")
            await callback_query.message.answer(f"–û—á–µ—Ä–µ–¥—å:\n" + "\n".join(users_list))
        else:
            users_list = []
            for i, user_id_in_queue in enumerate(queue):
                if user_id_in_queue in users_accounts:
                    username = users_accounts[user_id_in_queue]["username"]
                    users_list.append(f"{i + 1}. {username}")
                else:
                    users_list.append(f"{i + 1}. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            await callback_query.message.answer(f"–û—á–µ—Ä–µ–¥—å:\n" + "\n".join(users_list))
    else:
        await callback_query.message.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

@dp.callback_query_handler(lambda query: query.data == "clear_queue")
async def clear_queue(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if is_admin(user_id):
        queue.clear()
        for user in users_accounts:
            users_accounts[user]["in_queue"] = False
        await callback_query.message.answer("–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.")
    else:
        await callback_query.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

@dp.message_handler()
async def unknown_command(message: types.Message):
    await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)